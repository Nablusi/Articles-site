{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const updateArticleFetch = createAsyncThunk('updateArticleSlice/updateArticleFetch', async ({\n  image,\n  username,\n  bio,\n  email,\n  password,\n  token\n}) => {\n  const res = await fetch(`https://api.realworld.io/api/articles/:slug`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Token ${token}`\n    },\n    body: JSON.stringify({\n      user: {\n        email,\n        username,\n        bio,\n        image,\n        password\n      }\n    })\n  });\n  const data = await res.json();\n  return data;\n});\nconst updateArticleSlice = createSlice({\n  initialState: [],\n  name: 'updateArticleSlice',\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(updateArticleFetch.fulfilled, (state, action) => {\n      return action.payload;\n    });\n  }\n});\nexport default updateArticleSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","updateArticleFetch","image","username","bio","email","password","token","res","fetch","method","headers","body","JSON","stringify","user","data","json","updateArticleSlice","initialState","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["C:/projects-coding/projects/react-js/learn-react/ramizaid/src/ReduxPages/ReduxSlices/updateArticle-slice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const updateArticleFetch = createAsyncThunk('updateArticleSlice/updateArticleFetch', \r\nasync({image, username, bio, email, password, token})=>{\r\n    const res = await fetch(`https://api.realworld.io/api/articles/:slug`, \r\n    {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Token ${token}`\r\n        },\r\n        body: JSON.stringify({\r\n            user: {\r\n            email,\r\n            username,\r\n            bio,\r\n            image,\r\n            password,\r\n          },\r\n        }),\r\n      })\r\n    const data = await res.json();\r\n    return data; \r\n}\r\n)\r\n\r\nconst updateArticleSlice = createSlice({\r\n    initialState:[], \r\n    name:'updateArticleSlice', \r\n    reducers:{}, \r\n    extraReducers:(builder)=>{\r\n        builder.addCase(updateArticleFetch.fulfilled, (state, action)=>{\r\n            return action.payload; \r\n        })\r\n    }\r\n})\r\n\r\nexport default updateArticleSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,kBAAkB,GAAGD,gBAAgB,CAAC,uCAAuC,EAC1F,OAAM;EAACE,KAAK;EAAEC,QAAQ;EAAEC,GAAG;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAG;EACnD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,6CAA4C,EACrE;IACIC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,SAAQJ,KAAM;IAClC,CAAC;IACDK,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,IAAI,EAAE;QACNV,KAAK;QACLF,QAAQ;QACRC,GAAG;QACHF,KAAK;QACLI;MACF;IACF,CAAC;EACH,CAAC,CAAC;EACJ,MAAMU,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;EAC7B,OAAOD,IAAI;AACf,CACA,CAAC;AAED,MAAME,kBAAkB,GAAGnB,WAAW,CAAC;EACnCoB,YAAY,EAAC,EAAE;EACfC,IAAI,EAAC,oBAAoB;EACzBC,QAAQ,EAAC,CAAC,CAAC;EACXC,aAAa,EAAEC,OAAO,IAAG;IACrBA,OAAO,CAACC,OAAO,CAACvB,kBAAkB,CAACwB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAG;MAC3D,OAAOA,MAAM,CAACC,OAAO;IACzB,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;AAEF,eAAeV,kBAAkB,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}