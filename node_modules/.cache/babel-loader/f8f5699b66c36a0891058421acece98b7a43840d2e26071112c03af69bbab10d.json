{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// export const signUpFetch = createAsyncThunk(\n//   \"signUpSlice/signUpFetch\",\n//   async ({ username, email, password }) => {\n//     const res = await fetch(`https://api.realworld.io/api/users`, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({\n//         user: {\n//           username,\n//           email,\n//           password,\n//         },\n//       }),\n//     });\n//     const data = await res.json();\n//     // console.log(data.user.token);\n//     return data;\n//   }\n// );\n\nexport const signUpFetch = createAsyncThunk(\"signUpSlice/signUpFetch\", async ({\n  username,\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await fetch(`https://api.realworld.io/api/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username,\n          email,\n          password\n        }\n      })\n    });\n    const data = await res.json();\n    return data;\n  } catch (error) {\n    // If the backend responds with an error, reject the promise with the error message\n    if (error instanceof Response && error.status === 422) {\n      const data = await error.json();\n      return rejectWithValue(data);\n    }\n    throw error;\n  }\n});\nconst signUpSlice = createSlice({\n  name: \"signUpSlice\",\n  initialState: {},\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(signUpFetch.fulfilled, (state, action) => {\n      return action.payload;\n    });\n  }\n});\nexport default signUpSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","signUpFetch","username","email","password","rejectWithValue","res","fetch","method","headers","body","JSON","stringify","user","data","json","error","Response","status","signUpSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["C:/projects-coding/projects/react-js/learn-react/ramizaid/src/ReduxPages/ReduxSlices/signup-slice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\n// export const signUpFetch = createAsyncThunk(\r\n//   \"signUpSlice/signUpFetch\",\r\n//   async ({ username, email, password }) => {\r\n//     const res = await fetch(`https://api.realworld.io/api/users`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify({\r\n//         user: {\r\n//           username,\r\n//           email,\r\n//           password,\r\n//         },\r\n//       }),\r\n//     });\r\n//     const data = await res.json();\r\n//     // console.log(data.user.token);\r\n//     return data;\r\n//   }\r\n// );\r\n\r\nexport const signUpFetch = createAsyncThunk(\r\n  \"signUpSlice/signUpFetch\",\r\n  async ({ username, email, password }, { rejectWithValue }) => {\r\n    try {\r\n      const res = await fetch(`https://api.realworld.io/api/users`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user: {\r\n            username,\r\n            email,\r\n            password,\r\n          },\r\n        }),\r\n      });\r\n      const data = await res.json();\r\n      return data;\r\n    } catch (error) {\r\n      // If the backend responds with an error, reject the promise with the error message\r\n      if (error instanceof Response && error.status === 422) {\r\n        const data = await error.json();\r\n        return rejectWithValue(data);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n\r\n\r\nconst signUpSlice = createSlice({\r\n  name: \"signUpSlice\",\r\n  initialState: {},\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(signUpFetch.fulfilled, (state, action) => {\r\n      return action.payload;\r\n    });\r\n  },\r\n});\r\n\r\nexport default signUpSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGD,gBAAgB,CACzC,yBAAyB,EACzB,OAAO;EAAEE,QAAQ;EAAEC,KAAK;EAAEC;AAAS,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC5D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,oCAAmC,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE;UACJX,QAAQ;UACRC,KAAK;UACLC;QACF;MACF,CAAC;IACH,CAAC,CAAC;IACF,MAAMU,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;IAC7B,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACA,IAAIA,KAAK,YAAYC,QAAQ,IAAID,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;MACrD,MAAMJ,IAAI,GAAG,MAAME,KAAK,CAACD,IAAI,CAAC,CAAC;MAC/B,OAAOV,eAAe,CAACS,IAAI,CAAC;IAC9B;IACA,MAAME,KAAK;EACb;AACF,CACF,CAAC;AAGD,MAAMG,WAAW,GAAGpB,WAAW,CAAC;EAC9BqB,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE,CAAC,CAAC;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACxB,WAAW,CAACyB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxD,OAAOA,MAAM,CAACC,OAAO;IACvB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeV,WAAW,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}